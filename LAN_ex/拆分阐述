main.py：
用途：应用程序的主入口。它解析命令行参数并协调数据处理、模型训练和评估的执行流程。
集成了原始代码中的主要执行逻辑。
结合了init_node_sel_model_train.py、neigh_pruning_model_training.py和routing_with_neigh_pruning.py中的初始化与协调部分。
data_processing.py：
用途：包含用于读取和预处理数据集的函数和类，包括图数据加载、转换为DGL图、初始嵌入生成及其他数据准备任务。
如read_and_split_to_individual_graph等函数源自多个原始文件。
图转换函数如make_a_dglgraph源自init_node_sel_model_train.py、neigh_pruning_model_training.py和routing_with_neigh_pruning.py。
初始嵌入读取函数如read_initial_gemb源自相同文件。

odels.py：
用途：定义项目中使用的所有模型架构，包括用于图嵌入的GNN模型、剪枝模型及其他神经网络组件。
模型类如Model源自init_node_sel_model_train.py、neigh_pruning_model_training.py和routing_with_neigh_pruning.py。
将wl_labelling.py中的WL标签逻辑整合到适当的类或函数中。

training.py：
用途：负责模型训练的函数和类，包括训练循环、损失函数、优化步骤及超参数调优。
训练逻辑源自init_node_sel_model_train.py和neigh_pruning_model_training.py。
损失函数如weighted_binary_cross_entropy、myloss源自相同文件。
训练流程和优化器设置。

evaluation.py：
用途：提供评估函数以衡量模型性能，包括指标计算、模型验证、测试流程及结果可视化。
评估代码源自routing_with_neigh_pruning.py。
性能衡量函数如perf_measure、myloss_for_test源自init_node_sel_model_train.py和neigh_pruning_model_training.py。
可视化函数来自wl_labelling.py（如visualize_wl_label_graph）。

utils.py：
用途：包含项目中通用的辅助函数和类，如日志设置、配置管理及其他杂项实用工具。
通用辅助函数，如getExactDist、readQ2GDistBook、get_exact_answer，来自routing_with_neigh_pruning.py。
任何需要全局访问的共享常量或配置。

requirements.txt：
用途：列出了运行项目所需的Python依赖项，确保安装正确版本的软件包。
从所有原始代码文件中的import语句编译而来，确保与Python 3.12兼容。

源文件：
init_node_sel_model_train.py：
数据处理：如read_and_split_to_individual_graph、make_a_dglgraph函数移至data_processing.py。
模型定义：Model类移至models.py。
训练逻辑：训练循环和损失函数移至training.py。
实用工具：辅助函数及共享变量移至utils.py。
neigh_pruning_model_training.py：
数据处理：类似的数据加载和处理函数移至data_processing.py。
模型定义：若有不同的Model类，移入models.py。
训练逻辑：训练流程和损失函数移至training.py。
评估：任何评估代码移至evaluation.py。
routing_with_neigh_pruning.py：
数据处理：与读取图和数据集相关的函数移至data_processing.py。
模型定义：用于邻居剪枝的路由模型类移至models.py。
评估逻辑：如greedy_search函数及其他评估方法移至evaluation.py。
实用工具：如getExactDist、getDist等辅助函数移至utils.py。
wl_labelling.py：
数据处理：如与WL标签相关的make_a_dglgraph函数整合至data_processing.py。
模型定义：如gen_wl_label_udf类及compress_graph函数移至models.py。
可视化：可视化代码及相关工具移至evaluation.py或专门的可视化模块。
some_graph_matching_toolkit.jar（隐含）：

由于涉及Java依赖（如使用jpype与Java代码交互），任何Java集成代码可以封装在utils.py或专用模块（如java_integration.py）中。
确保Java相关代码与当前环境兼容，并在README.md中记录必要的Java依赖项。
简化与重构注意事项：

扁平化目录结构：通过将所有Python脚本置于根目录（或少量子目录），简化导航，减少复杂性。
模块分离：函数和类按用途分组，使代码更加模块化、易于维护。
与Python 3.12的兼容性：

更新语法和库以与Python 3.12兼容。
确保所有第三方库（如DGL、PyTorch）与Python 3.12兼容，并在requirements.txt中记录必要的更新。
冗余移除：
合并原始文件中重复出现的函数。
统一模型定义，通过参数化类处理不同的用例。
可读性和可维护性改进：

添加docstrings和注释以解释函数和类的用途。
组织代码以遵循最佳实践，如遵循PEP 8风格指南。
配置管理：

原始代码中任何硬编码的路径或参数已移至main.py中的配置变量或命令行参数。
这种方式使代码更加灵活，易于适应不同的数据集或环境。

与原始文件的变更摘要：
将分散在原始文件中的各种数据处理函数合并至data_processing.py。
统一模型定义至models.py，更易于管理和扩展模型。
将训练循环和损失函数定义移至training.py，提供集中管理训练相关代码的场所。
将评估和可视化代码集中到evaluation.py，促进一致的模型性能评估。
将实用函数整合至utils.py，减少代码重复性，提升复用性。
简化项目结构，避免深层目录，使其更易于导航和理解。
更新代码以兼容Python 3.12，解决任何弃用的语法或库调用。
改进代码文档，并添加
解释以提高清晰度和可维护性。